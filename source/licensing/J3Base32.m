//
// J3Base32.m
//
// Copyright (c) 2007 3James Software.
//

#include "J3Base32.h"

static inline uint8_t
decode_bits (uint8_t bits)
{
  uint8_t table[] = { 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 
    0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 
    0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF
  };
  return table[bits];
}

size_t 
base32_decode (uint8_t **decodedString, const uint8_t *encodedString, size_t length)
{
  if (length == 0 || length % 8 != 0)
    return 0;
  
  size_t maxDecodedLength = length * 8 / 5;
  uint8_t *output = malloc (maxDecodedLength);
  if (output == NULL)
    return 0;
  *decodedString = output;
  for (unsigned i = 0; i < maxDecodedLength; i++)
    output[i] = 0;
  
  size_t bytes = 0;
  uint8_t currentByte = 0;
  for (unsigned offset = 0; offset < length; offset += 8)
  {
    output[bytes] = decode_bits (encodedString[offset + 0]) << 3; 
    currentByte = decode_bits (encodedString[offset + 1]);
    output[bytes] += currentByte >> 2;
    output[bytes + 1] = (currentByte & 0x03) << 6;
    
    if (encodedString[offset + 2] == '=')
      return bytes + 1;
    else
      bytes++;
    
    output[bytes] += decode_bits (encodedString[offset + 2]) << 1;
    currentByte = decode_bits (encodedString[offset + 3]);
    output[bytes] += currentByte >> 4;
    output[bytes + 1] = currentByte << 4;
    
    if (encodedString[offset + 4] == '=')
      return bytes + 1;
    else
      bytes++;
    
    currentByte = decode_bits (encodedString[offset + 4]);
    output[bytes] += currentByte >> 1;
    output[bytes + 1] = currentByte << 7;

    if (encodedString[offset + 5] == '=')
      return bytes + 1;
    else
      bytes++;
    
    output[bytes] += decode_bits (encodedString[offset + 5]) << 2;
    currentByte = decode_bits (encodedString[offset + 6]);
    output[bytes] +=  currentByte >> 3;
    output[bytes + 1] = (currentByte & 0x07) << 5; 

    if (encodedString[offset + 7] == '=')
      return bytes + 1;
    else
      bytes++;

    output[bytes] += decode_bits (encodedString[offset + 7]) & 0x1F;
    bytes++;
  }
  return bytes;
}
