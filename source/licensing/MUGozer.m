//
// MUGozer.m
//
// Copyright (c) 2007 3James Software.
//


#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/bio.h>

#import "MUConstants.h"
#import "MUGozer.h"
#import "J3Base32.h"

#define GOZER_KEY_LENGTH 130
#define PUBLIC_KEY \
{ 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x50, 0x55, \
  0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, \
  0x0A, 0x4D, 0x49, 0x47, 0x68, 0x4D, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, \
  0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x41, 0x51, 0x55, 0x41, 0x41, \
  0x34, 0x47, 0x50, 0x41, 0x44, 0x43, 0x42, 0x69, 0x77, 0x4B, 0x42, 0x67, 0x77, \
  0x43, 0x69, 0x69, 0x77, 0x61, 0x57, 0x4C, 0x6B, 0x33, 0x69, 0x68, 0x71, 0x6D, \
  0x58, 0x4E, 0x39, 0x38, 0x6C, 0x76, 0x67, 0x34, 0x34, 0x5A, 0x48, 0x53, 0x44, \
  0x0A, 0x72, 0x7A, 0x67, 0x67, 0x38, 0x38, 0x77, 0x48, 0x35, 0x73, 0x57, 0x4D, \
  0x73, 0x75, 0x57, 0x38, 0x71, 0x38, 0x62, 0x53, 0x4E, 0x49, 0x45, 0x62, 0x76, \
  0x76, 0x31, 0x75, 0x2B, 0x4E, 0x43, 0x54, 0x48, 0x64, 0x51, 0x6E, 0x36, 0x31, \
  0x37, 0x54, 0x46, 0x33, 0x30, 0x73, 0x56, 0x65, 0x54, 0x45, 0x46, 0x69, 0x6D, \
  0x4A, 0x4E, 0x32, 0x62, 0x48, 0x69, 0x35, 0x52, 0x58, 0x62, 0x74, 0x79, 0x77, \
  0x0A, 0x69, 0x50, 0x53, 0x7A, 0x78, 0x76, 0x6F, 0x78, 0x7A, 0x49, 0x50, 0x53, \
  0x53, 0x47, 0x68, 0x37, 0x59, 0x64, 0x4B, 0x4B, 0x65, 0x69, 0x49, 0x59, 0x6F, \
  0x56, 0x32, 0x47, 0x63, 0x45, 0x6D, 0x58, 0x42, 0x67, 0x75, 0x33, 0x46, 0x33, \
  0x43, 0x2B, 0x45, 0x42, 0x43, 0x36, 0x59, 0x68, 0x32, 0x52, 0x6B, 0x64, 0x4C, \
  0x6C, 0x67, 0x79, 0x53, 0x75, 0x48, 0x59, 0x35, 0x46, 0x47, 0x4D, 0x4C, 0x33, \
  0x0A, 0x65, 0x77, 0x4C, 0x76, 0x47, 0x52, 0x59, 0x75, 0x34, 0x43, 0x4E, 0x4E, \
  0x46, 0x64, 0x31, 0x48, 0x4A, 0x53, 0x2B, 0x78, 0x41, 0x67, 0x4D, 0x42, 0x41, \
  0x41, 0x45, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E, 0x44, 0x20, \
  0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, \
  0x2D, 0x2D, 0x0A }

#pragma mark Prototypes Not Found In Header

// keymaster is a buffer into which the Base32 decoded key will be read
//   it must be at least GOZER_KEY_LENGTH bytes long.
// gatekeeper is a buffer into which the SHA1 hash of the validation information will be placed
//   it must be at least SHA_DIGEST_LENGTH bytes long.
extern inline void load_license (NSDictionary *licenseInfo, uint8_t *keymaster, uint8_t *gatekeeper); 

// gozer is a GOZER_KEY_LENGTH sized buffer containing the raw bytes of the key
// gozarian is a SHA_DIGEST_LENGTH sized buffer containing the SHA1 hash of the
//   validation information
extern inline BOOL validate_license (const uint8_t *gozer, const uint8_t *gozarian);

uint8_t gozer_key[GOZER_KEY_LENGTH];
uint8_t gozer_digest[SHA_DIGEST_LENGTH];
BOOL license_loaded = NO;

#pragma mark -
#pragma mark Functions Found In Header

inline BOOL import_license_file (NSString *filename)
{
  license_loaded = NO;

  NSDictionary *dictionary = [NSDictionary dictionaryWithContentsOfFile: filename]; 

  uint8_t incoming_key[GOZER_KEY_LENGTH];
  uint8_t incoming_digest[SHA_DIGEST_LENGTH];
  load_license (dictionary, incoming_key, incoming_digest);
  if (!validate_license (incoming_key, incoming_digest))
    return NO;
  
  [[NSUserDefaults standardUserDefaults] setObject: dictionary forKey: MULicenseInfo];
  return YES;
}

inline BOOL licensed (void)
{
  if (!license_loaded)
  {
    load_license ([[NSUserDefaults standardUserDefaults] valueForKey: MULicenseInfo], gozer_key, gozer_digest);
    license_loaded = YES;
  }
  return validate_license (gozer_key, gozer_digest);
}

#pragma mark -
#pragma mark Imlepmentation of Prototypes Not Found In Header

inline void load_license (NSDictionary *licenseInfo, uint8_t *keymaster, uint8_t *gatekeeper)
{
  NSData *data = [J3Base32 decodeString: [licenseInfo valueForKey: MULicenseKey]];
  [data getBytes: keymaster length: GOZER_KEY_LENGTH];
  NSString *identifier = [NSString stringWithFormat: @"E463E475-DFB2-44D3-9A48-D30395AA0DFD%@%@", [licenseInfo valueForKey: MULicenseOwner], [licenseInfo valueForKey: MULicenseDateCreated]];
  SHA1 ((unsigned char *) [identifier cStringUsingEncoding: NSASCIIStringEncoding], [identifier lengthOfBytesUsingEncoding: NSASCIIStringEncoding], gatekeeper);
}

inline BOOL validate_license (const uint8_t *gozer, const uint8_t *gozarian)
{
  uint8_t pem_public_key[] = PUBLIC_KEY;
  BIO *bio = BIO_new_mem_buf (pem_public_key, sizeof (pem_public_key));
  if (bio == NULL)
    return NO;
  @try
  {
    RSA *public_key = NULL;
    public_key = PEM_read_bio_RSA_PUBKEY (bio, NULL, NULL, NULL);
    if (public_key == NULL)
      return NO;
    @try
    {
      uint8_t *buffer = malloc (RSA_size (public_key));
      @try
      {
        ssize_t length = RSA_public_decrypt (GOZER_KEY_LENGTH, gozer, buffer, public_key, RSA_PKCS1_PADDING);
        if (length < 0)
          return NO;
        if ((size_t) length != SHA_DIGEST_LENGTH)
          return NO;
        // Don't use strncmp here since it is probably linked in and easy to hack
        for (int i = 0; i < length; i++)
        {
          if (gozarian[i] != buffer[i])
            return NO;
        }
      }
      @finally
      {
        free(buffer);
      }
    }
    @finally
    {
      RSA_free(public_key);
    }
  }
  @finally
  {
    BIO_free(bio);
  }
  return YES;
}
